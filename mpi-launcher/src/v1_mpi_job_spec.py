# Copyright 2019 kubeflow.org.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    MPI-Job

    Python SDK for MPI-Operator  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from v1_replica_spec import V1ReplicaSpec  # noqa: F401,E501


class V1MPIJobSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mpi_replica_specs': 'dict(str, V1ReplicaSpec)',
        'scheduling_policy': 'V1SchedulingPolicy',
        'active_deadline_seconds': 'int',
        'backoff_limit': 'int',
        'clean_pod_policy': 'str',
        'slots_per_worker': 'int',
        'ttl_seconds_after_finished': 'int'
    }

    attribute_map = {
        'mpi_replica_specs': 'mpiReplicaSpecs',
        'scheduling_policy': 'schedulingPolicy',
        'active_deadline_seconds': 'activeDeadlineSeconds',
        'backoff_limit': 'backoffLimit',
        'clean_pod_policy': 'cleanPodPolicy',
        'slots_per_worker': 'slotsPerWorker',
        'ttl_seconds_after_finished': 'ttlSecondsAfterFinished'
    }

    def __init__(self, mpi_replica_specs=None, scheduling_policy=None, active_deadline_seconds=None, backoff_limit=None, clean_pod_policy=None, slots_per_worker=None, ttl_seconds_after_finished=None):  # noqa: E501
        """V1MPIJobSpec - a model defined in Swagger"""  # noqa: E501

        self._mpi_replica_specs = None
        self._scheduling_policy = None
        self._active_deadline_seconds = None
        self._backoff_limit = None
        self._clean_pod_policy = None
        self._slots_per_worker = None
        self._ttl_seconds_after_finished = None
        self.discriminator = None

        self.mpi_replica_specs = mpi_replica_specs
        if scheduling_policy is not None:
            self.scheduling_policy = scheduling_policy
        if active_deadline_seconds is not None:
            self.active_deadline_seconds = active_deadline_seconds
        if backoff_limit is not None:
            self.backoff_limit = backoff_limit
        if clean_pod_policy is not None:
            self.clean_pod_policy = clean_pod_policy
        if slots_per_worker is not None:
            self.slots_per_worker = slots_per_worker
        if ttl_seconds_after_finished is not None:
            self.ttl_seconds_after_finished = ttl_seconds_after_finished

    @property
    def mpi_replica_specs(self):
        """Gets the mpi_replica_specs of this V1MPIJobSpec.  # noqa: E501

        A map of MPIReplicaType (type) to ReplicaSpec (value). Specifies the MPI cluster configuration. For example,   {     \"Master\": MPIReplicaSpec,     \"Worker\": MPIReplicaSpec,   }  # noqa: E501

        :return: The mpi_replica_specs of this V1MPIJobSpec.  # noqa: E501
        :rtype: dict(str, V1ReplicaSpec)
        """
        return self._mpi_replica_specs

    @mpi_replica_specs.setter
    def mpi_replica_specs(self, mpi_replica_specs):
        """Sets the mpi_replica_specs of this V1MPIJobSpec.

        A map of MPIReplicaType (type) to ReplicaSpec (value). Specifies the MPI cluster configuration. For example,   {     \"Master\": MPIReplicaSpec,     \"Worker\": MPIReplicaSpec,   }  # noqa: E501

        :param mpi_replica_specs: The mpi_replica_specs of this V1MPIJobSpec.  # noqa: E501
        :type: dict(str, V1ReplicaSpec)
        """
        if mpi_replica_specs is None:
            raise ValueError("Invalid value for `mpi_replica_specs`, must not be `None`")  # noqa: E501

        self._mpi_replica_specs = mpi_replica_specs

    @property
    def scheduling_policy(self):
        """Gets the active_deadline_seconds of this V1MPIJobSpec.  # noqa: E501

        Specifies the scheduling policy.  # noqa: E501

        :return: The active_deadline_seconds of this V1MPIJobSpec.  # noqa: E501
        :rtype: int
        """
        return self._active_deadline_seconds

    @scheduling_policy.setter
    def scheduling_policy(self, scheduling_policy):
        """Sets the scheduling_policy of this V1MPIJobSpec.

        Specifies the scheduling policy.  # noqa: E501

        :param scheduling_policy: The scheduling_policy of this V1MPIJobSpec.  # noqa: E501
        :type: int
        """

        self._scheduling_policy = scheduling_policy

    @property
    def active_deadline_seconds(self):
        """Gets the active_deadline_seconds of this V1MPIJobSpec.  # noqa: E501

        Specifies the duration (in seconds) since startTime during which the job can remain active before it is terminated. Must be a positive integer. This setting applies only to pods where restartPolicy is OnFailure or Always.  # noqa: E501

        :return: The active_deadline_seconds of this V1MPIJobSpec.  # noqa: E501
        :rtype: int
        """
        return self._active_deadline_seconds

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, active_deadline_seconds):
        """Sets the active_deadline_seconds of this V1MPIJobSpec.

        Specifies the duration (in seconds) since startTime during which the job can remain active before it is terminated. Must be a positive integer. This setting applies only to pods where restartPolicy is OnFailure or Always.  # noqa: E501

        :param active_deadline_seconds: The active_deadline_seconds of this V1MPIJobSpec.  # noqa: E501
        :type: int
        """

        self._active_deadline_seconds = active_deadline_seconds

    @property
    def backoff_limit(self):
        """Gets the backoff_limit of this V1MPIJobSpec.  # noqa: E501

        Number of retries before marking this job as failed.  # noqa: E501

        :return: The backoff_limit of this V1MPIJobSpec.  # noqa: E501
        :rtype: int
        """
        return self._backoff_limit

    @backoff_limit.setter
    def backoff_limit(self, backoff_limit):
        """Sets the backoff_limit of this V1MPIJobSpec.

        Number of retries before marking this job as failed.  # noqa: E501

        :param backoff_limit: The backoff_limit of this V1MPIJobSpec.  # noqa: E501
        :type: int
        """

        self._backoff_limit = backoff_limit

    @property
    def clean_pod_policy(self):
        """Gets the clean_pod_policy of this V1MPIJobSpec.  # noqa: E501

        Defines the policy for cleaning up pods after the MPIJob completes. Defaults to None.  # noqa: E501

        :return: The clean_pod_policy of this V1MPIJobSpec.  # noqa: E501
        :rtype: str
        """
        return self._clean_pod_policy

    @clean_pod_policy.setter
    def clean_pod_policy(self, clean_pod_policy):
        """Sets the clean_pod_policy of this V1MPIJobSpec.

        Defines the policy for cleaning up pods after the MPIJob completes. Defaults to None.  # noqa: E501

        :param clean_pod_policy: The clean_pod_policy of this V1MPIJobSpec.  # noqa: E501
        :type: str
        """

        self._clean_pod_policy = clean_pod_policy

    @property
    def slots_per_worker(self):
        """Gets the slots_per_worker of this V1MPIJobSpec.  # noqa: E501

        Defines the policy for cleaning up pods after the MPIJob completes. Defaults to None.  # noqa: E501

        :return: The slots_per_worker of this V1MPIJobSpec.  # noqa: E501
        :rtype: str
        """
        return self._slots_per_worker

    @slots_per_worker.setter
    def slots_per_worker(self, slots_per_worker):
        """Sets the slots_per_worker of this V1MPIJobSpec.

        Defines the policy for cleaning up pods after the MPIJob completes. Defaults to None.  # noqa: E501

        :param slots_per_worker: The slots_per_worker of this V1MPIJobSpec.  # noqa: E501
        :type: str
        """

        self._slots_per_worker = slots_per_worker

    @property
    def ttl_seconds_after_finished(self):
        """Gets the ttl_seconds_after_finished of this V1MPIJobSpec.  # noqa: E501

        Defines the TTL for cleaning up finished MPIJobs (temporary before Kubernetes adds the cleanup controller). It may take extra ReconcilePeriod seconds for the cleanup, since reconcile gets called periodically. Defaults to infinite.  # noqa: E501

        :return: The ttl_seconds_after_finished of this V1MPIJobSpec.  # noqa: E501
        :rtype: int
        """
        return self._ttl_seconds_after_finished

    @ttl_seconds_after_finished.setter
    def ttl_seconds_after_finished(self, ttl_seconds_after_finished):
        """Sets the ttl_seconds_after_finished of this V1MPIJobSpec.

        Defines the TTL for cleaning up finished MPIJobs (temporary before Kubernetes adds the cleanup controller). It may take extra ReconcilePeriod seconds for the cleanup, since reconcile gets called periodically. Defaults to infinite.  # noqa: E501

        :param ttl_seconds_after_finished: The ttl_seconds_after_finished of this V1MPIJobSpec.  # noqa: E501
        :type: int
        """

        self._ttl_seconds_after_finished = ttl_seconds_after_finished

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MPIJobSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MPIJobSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
