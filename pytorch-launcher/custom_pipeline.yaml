apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: launch-kubeflow-pytorchjob-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.22, pipelines.kubeflow.org/pipeline_compilation_time: '2024-02-26T08:50:16.470727',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "An example to launch pytorch.",
      "inputs": [{"name": "name", "type": "String"}, {"name": "namespace", "type":
      "String"}, {"description": "Image registry for workers (string)", "name": "image",
      "type": "String"}, {"description": "Command for workers (string)", "name": "command",
      "type": "String"}, {"description": "Number of workers (integer)", "name": "num_worker",
      "type": "Integer"}, {"description": "CPU allocation per worker (integer: Cores)",
      "name": "cpu_per_worker", "type": "Integer"}, {"description": "Memory allocation
      per worker (integer: GiB)", "name": "memory_per_worker", "type": "Integer"},
      {"description": "GPU allocation per worker (integer)", "name": "gpu_per_worker",
      "type": "Integer"}], "name": "launch-kubeflow-pytorchjob"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.22}
spec:
  entrypoint: launch-kubeflow-pytorchjob
  templates:
  - name: clear-pytorchjob
    container:
      args: [--name, pytorch-cnn-dist-job, --namespace, '{{inputs.parameters.namespace}}',
        --version, v1]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'kubernetes' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'kubernetes' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def Clear_PyTorchJob(name, namespace, version="v1"):
            import kubernetes
            kubernetes.config.load_incluster_config()
            api_instance = kubernetes.client.CustomObjectsApi()
            group = "kubeflow.org"
            plural = "pytorchjobs"
            try:
                api_response = api_instance.delete_namespaced_custom_object(
                    name=name,
                    namespace=namespace,
                    group=group,
                    version=version,
                    plural=plural,
                    body=kubernetes.client.models.V1DeleteOptions(
                        propagation_policy='Foreground',
                        grace_period_seconds=15
                    )
                )
                print("PyTorchJob deleted. Status='%s'" % str(api_response.get("status", None)))
            except kubernetes.client.rest.ApiException as e:
                print("Exception when calling CustomObjectsApi->delete_namespaced_custom_object: %s\n" % e)

        import argparse
        _parser = argparse.ArgumentParser(prog='Clear PyTorchJob', description='')
        _parser.add_argument("--name", dest="name", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--namespace", dest="namespace", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--version", dest="version", type=str, required=False, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = Clear_PyTorchJob(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: namespace}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.22
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--name", {"inputValue": "name"}, "--namespace", {"inputValue":
          "namespace"}, {"if": {"cond": {"isPresent": "version"}, "then": ["--version",
          {"inputValue": "version"}]}}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''kubernetes''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''kubernetes'' --user) && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def Clear_PyTorchJob(name, namespace, version=\"v1\"):\n    import kubernetes\n    kubernetes.config.load_incluster_config()\n    api_instance
          = kubernetes.client.CustomObjectsApi()\n    group = \"kubeflow.org\"\n    plural
          = \"pytorchjobs\"\n    try:\n        api_response = api_instance.delete_namespaced_custom_object(\n            name=name,\n            namespace=namespace,\n            group=group,\n            version=version,\n            plural=plural,\n            body=kubernetes.client.models.V1DeleteOptions(\n                propagation_policy=''Foreground'',\n                grace_period_seconds=15\n            )\n        )\n        print(\"PyTorchJob
          deleted. Status=''%s''\" % str(api_response.get(\"status\", None)))\n    except
          kubernetes.client.rest.ApiException as e:\n        print(\"Exception when
          calling CustomObjectsApi->delete_namespaced_custom_object: %s\\n\" % e)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Clear PyTorchJob'', description='''')\n_parser.add_argument(\"--name\",
          dest=\"name\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--namespace\",
          dest=\"namespace\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--version\",
          dest=\"version\", type=str, required=False, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = Clear_PyTorchJob(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "name"}, {"name": "namespace"},
          {"default": "v1", "name": "version", "optional": true}], "name": "Clear
          PyTorchJob"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"name":
          "pytorch-cnn-dist-job", "namespace": "{{inputs.parameters.namespace}}",
          "version": "v1"}'}
  - name: launch-kubeflow-pytorchjob
    inputs:
      parameters:
      - {name: cpu_per_worker}
      - {name: gpu_per_worker}
      - {name: memory_per_worker}
      - {name: namespace}
      - {name: num_worker}
    dag:
      tasks:
      - name: clear-pytorchjob
        template: clear-pytorchjob
        dependencies: [pytorchjob-launcher]
        arguments:
          parameters:
          - {name: namespace, value: '{{inputs.parameters.namespace}}'}
      - name: pytorchjob-launcher
        template: pytorchjob-launcher
        arguments:
          parameters:
          - {name: cpu_per_worker, value: '{{inputs.parameters.cpu_per_worker}}'}
          - {name: gpu_per_worker, value: '{{inputs.parameters.gpu_per_worker}}'}
          - {name: memory_per_worker, value: '{{inputs.parameters.memory_per_worker}}'}
          - {name: namespace, value: '{{inputs.parameters.namespace}}'}
          - {name: num_worker, value: '{{inputs.parameters.num_worker}}'}
  - name: pytorchjob-launcher
    container:
      args:
      - --name
      - pytorch-cnn-dist-job
      - --namespace
      - '{{inputs.parameters.namespace}}'
      - --version
      - v1
      - --masterSpec
      - '{           "replicas": 1,           "restartPolicy": "Never",           "template":
        {             "metadata": {               "annotations": {                 "sidecar.istio.io/inject":
        "false",               },               "labels": {                 "pod-group.scheduling.x-k8s.io/name":
        pytorch-cnn-dist-job               }             },             "spec": {               "containers":
        [                 {                   "name": "pytorch",                   "image":
        "yhjh5302/pytorchjob-test:latest",                   "command": ["/bin/bash",
        "-c", "cd /workspace && python3 pytorchjob_train.py --batch_size=1 --backend=gloo"],                   "resources":
        {                     "limits": {                       "cpu": {{inputs.parameters.cpu_per_worker}},                       "memory":
        {{inputs.parameters.memory_per_worker}}Gi,                       "nvidia.com/gpu":
        {{inputs.parameters.gpu_per_worker}}                     }                   },                   "volumeMounts":
        [                     {                         "name": "dshm",                         "mountPath":
        "/dev/shm"                     }                   ]                 }               ],               "volumes":
        [                 {                   "name": "dshm",                   "emptyDir":
        {                     "medium": "Memory"                   }                 }               ]             }           }         }'
      - --workerSpec
      - '{           "replicas": {{inputs.parameters.num_worker}},           "restartPolicy":
        "Never",           "template": {             "metadata": {               "annotations":
        {                 "sidecar.istio.io/inject": "false",               },               "labels":
        {                 "pod-group.scheduling.x-k8s.io/name": pytorch-cnn-dist-job               }             },             "spec":
        {               "containers": [                 {                   "name":
        "pytorch",                   "image": "yhjh5302/pytorchjob-test:latest",                   "command":
        ["/bin/bash", "-c", "cd /workspace && python3 pytorchjob_train.py --batch_size=1
        --backend=gloo"],                   "resources": {                     "limits":
        {                       "cpu": {{inputs.parameters.cpu_per_worker}},                       "memory":
        {{inputs.parameters.memory_per_worker}}Gi,                       "nvidia.com/gpu":
        {{inputs.parameters.gpu_per_worker}}                     }                   },                   "volumeMounts":
        [                     {                         "name": "dshm",                         "mountPath":
        "/dev/shm"                     }                   ]                 }               ],               "volumes":
        [                 {                   "name": "dshm",                   "emptyDir":
        {                     "medium": "Memory"                   }                 }               ]             }           }         }'
      - --jobTimeoutMinutes
      - '1440'
      - --deleteAfterDone
      - "True"
      - --cleanPodPolicy
      - Running
      command: [python, /ml/launch_pytorchjob.py]
      image: yhjh5302/kubeflow-pytorchjob-launcher:v1
    inputs:
      parameters:
      - {name: cpu_per_worker}
      - {name: gpu_per_worker}
      - {name: memory_per_worker}
      - {name: namespace}
      - {name: num_worker}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.22
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Kubeflow
          PyTorchJob launcher", "implementation": {"container": {"args": ["--name",
          {"inputValue": "name"}, "--namespace", {"inputValue": "namespace"}, "--version",
          {"inputValue": "version"}, "--masterSpec", {"inputValue": "master_spec"},
          "--workerSpec", {"inputValue": "worker_spec"}, "--jobTimeoutMinutes", {"inputValue":
          "job_timeout_minutes"}, "--deleteAfterDone", {"inputValue": "delete_after_done"},
          "--cleanPodPolicy", {"inputValue": "clean_pod_policy"}, {"if": {"cond":
          {"isPresent": "active_deadline_seconds"}, "then": ["--activeDeadlineSeconds",
          {"inputValue": "active_deadline_seconds"}]}}, {"if": {"cond": {"isPresent":
          "backoff_limit"}, "then": ["--backoffLimit", {"inputValue": "backoff_limit"}]}},
          {"if": {"cond": {"isPresent": "ttl_seconds_after_finished"}, "then": ["--ttlSecondsAfterFinished",
          {"inputValue": "ttl_seconds_after_finished"}]}}], "command": ["python",
          "/ml/launch_pytorchjob.py"], "image": "yhjh5302/kubeflow-pytorchjob-launcher:v1"}},
          "inputs": [{"description": "PyTorchJob name.", "name": "name", "type": "String"},
          {"default": "kubeflow", "description": "PyTorchJob namespace (likely your
          current namespace).", "name": "namespace", "type": "String"}, {"default":
          "v1", "description": "PyTorchJob version.", "name": "version", "type": "String"},
          {"default": "{}", "description": "PyTorchJob Master replicaSpecs.", "name":
          "master_spec", "type": "JsonObject"}, {"default": "{}", "description": "PyTorchJob
          Worker replicaSpecs.", "name": "worker_spec", "type": "JsonObject"}, {"default":
          1440, "description": "Time in minutes to wait for the job to complete.",
          "name": "job_timeout_minutes", "type": "Integer"}, {"default": "True", "description":
          "Whether to delete the job after it is finished.", "name": "delete_after_done",
          "type": "Boolean"}, {"default": "Running", "description": "Defines the policy
          for cleaning up pods after the PyTorchJob completes.", "name": "clean_pod_policy",
          "type": "String"}, {"description": "Specifies the duration (in seconds)
          since startTime during which the job can remain active before it is terminated.
          Must be a positive integer. This setting applies only to pods where restartPolicy
          is OnFailure or Always.", "name": "active_deadline_seconds", "optional":
          true, "type": "Integer"}, {"description": "Number of retries before marking
          this job as failed.", "name": "backoff_limit", "optional": true, "type":
          "Integer"}, {"description": "Defines the TTL for cleaning up finished PyTorchJobs.",
          "name": "ttl_seconds_after_finished", "optional": true, "type": "Integer"}],
          "name": "PyTorchJob Launcher"}', pipelines.kubeflow.org/component_ref: '{"digest":
          "a00c8c4fd7074c33d851f5cf74101f642063b91e16d8ec5d48cb67a10b1141e1", "url":
          "./pytorch_job_component.yaml"}', pipelines.kubeflow.org/arguments.parameters: '{"clean_pod_policy":
          "Running", "delete_after_done": "True", "job_timeout_minutes": "1440", "master_spec":
          "{           \"replicas\": 1,           \"restartPolicy\": \"Never\",           \"template\":
          {             \"metadata\": {               \"annotations\": {                 \"sidecar.istio.io/inject\":
          \"false\",               },               \"labels\": {                 \"pod-group.scheduling.x-k8s.io/name\":
          pytorch-cnn-dist-job               }             },             \"spec\":
          {               \"containers\": [                 {                   \"name\":
          \"pytorch\",                   \"image\": \"yhjh5302/pytorchjob-test:latest\",                   \"command\":
          [\"/bin/bash\", \"-c\", \"cd /workspace && python3 pytorchjob_train.py --batch_size=1
          --backend=gloo\"],                   \"resources\": {                     \"limits\":
          {                       \"cpu\": {{inputs.parameters.cpu_per_worker}},                       \"memory\":
          {{inputs.parameters.memory_per_worker}}Gi,                       \"nvidia.com/gpu\":
          {{inputs.parameters.gpu_per_worker}}                     }                   },                   \"volumeMounts\":
          [                     {                         \"name\": \"dshm\",                         \"mountPath\":
          \"/dev/shm\"                     }                   ]                 }               ],               \"volumes\":
          [                 {                   \"name\": \"dshm\",                   \"emptyDir\":
          {                     \"medium\": \"Memory\"                   }                 }               ]             }           }         }",
          "name": "pytorch-cnn-dist-job", "namespace": "{{inputs.parameters.namespace}}",
          "version": "v1", "worker_spec": "{           \"replicas\": {{inputs.parameters.num_worker}},           \"restartPolicy\":
          \"Never\",           \"template\": {             \"metadata\": {               \"annotations\":
          {                 \"sidecar.istio.io/inject\": \"false\",               },               \"labels\":
          {                 \"pod-group.scheduling.x-k8s.io/name\": pytorch-cnn-dist-job               }             },             \"spec\":
          {               \"containers\": [                 {                   \"name\":
          \"pytorch\",                   \"image\": \"yhjh5302/pytorchjob-test:latest\",                   \"command\":
          [\"/bin/bash\", \"-c\", \"cd /workspace && python3 pytorchjob_train.py --batch_size=1
          --backend=gloo\"],                   \"resources\": {                     \"limits\":
          {                       \"cpu\": {{inputs.parameters.cpu_per_worker}},                       \"memory\":
          {{inputs.parameters.memory_per_worker}}Gi,                       \"nvidia.com/gpu\":
          {{inputs.parameters.gpu_per_worker}}                     }                   },                   \"volumeMounts\":
          [                     {                         \"name\": \"dshm\",                         \"mountPath\":
          \"/dev/shm\"                     }                   ]                 }               ],               \"volumes\":
          [                 {                   \"name\": \"dshm\",                   \"emptyDir\":
          {                     \"medium\": \"Memory\"                   }                 }               ]             }           }         }"}'}
  arguments:
    parameters:
    - {name: name}
    - {name: namespace}
    - {name: image}
    - {name: command}
    - {name: num_worker}
    - {name: cpu_per_worker}
    - {name: memory_per_worker}
    - {name: gpu_per_worker}
  serviceAccountName: pipeline-runner
